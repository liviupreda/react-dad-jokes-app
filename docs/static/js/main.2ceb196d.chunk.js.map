{"version":3,"sources":["Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","this","props","votes","className","onClick","upvote","style","borderColor","getColor","downvote","text","getEmoji","Component","JokeList","state","jokes","JSON","parse","window","localStorage","getItem","loading","seenJokes","Set","map","jk","handleClick","bind","length","loadJokes","setState","numJokes","axios","get","headers","Accept","res","has","data","joke","console","log","push","id","st","setItem","stringify","alert","delta","src","alt","key","handleVote","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ceb196d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Joke.css\";\n\nclass Joke extends Component {\n  getColor() {\n    if (this.props.votes >= 15) {\n      return \"#4CAF50\";\n    } else if (this.props.votes >= 12) {\n      return \"#8BC34A\";\n    } else if (this.props.votes >= 9) {\n      return \"#CDDC39\";\n    } else if (this.props.votes >= 6) {\n      return \"#FFEB3B\";\n    } else if (this.props.votes >= 3) {\n      return \"#FFC107\";\n    } else if (this.props.votes >= 0) {\n      return \"#FF9800\";\n    } else {\n      return \"#f44336\";\n    }\n  }\n\n  getEmoji() {\n    if (this.props.votes >= 15) {\n      return \"em em-rolling_on_the_floor_laughing\";\n    } else if (this.props.votes >= 12) {\n      return \"em em-laughing\";\n    } else if (this.props.votes >= 9) {\n      return \"em em-smiley\";\n    } else if (this.props.votes >= 6) {\n      return \"em em-slightly_smiling_face\";\n    } else if (this.props.votes >= 3) {\n      return \"em em-neutral_face\";\n    } else if (this.props.votes >= 0) {\n      return \"em em-confused\";\n    } else {\n      return \"em em-angry\";\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Joke\">\n        <div className=\"Joke-buttons\">\n          <i className=\"fa fa-arrow-up\" onClick={this.props.upvote}></i>\n          <span className=\"Joke-votes\" style={{ borderColor: this.getColor() }}>\n            {this.props.votes}\n          </span>\n          <i className=\"fa fa-arrow-down\" onClick={this.props.downvote}></i>\n        </div>\n        <div className=\"Joke-text\">{this.props.text}</div>\n        <div className=\"Joke-emoji\">\n          <i className={this.getEmoji()} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Joke;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\nlet API_URL = \"https://icanhazdadjoke.com/\";\n\nclass JokeList extends Component {\n  static defaultProps = {\n    numJokes: 10\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      // If LS is empty, set jokes to an empty array\n      jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\n      loading: false\n    };\n    this.seenJokes = new Set(this.state.jokes.map(jk => jk.text));\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state.jokes.length === 0) {\n      this.loadJokes();\n    }\n  }\n\n  // Click events on 'Get more jokes' button\n  handleClick() {\n    this.setState({ loading: true }, this.loadJokes);\n  }\n\n  async loadJokes() {\n    try {\n      let jokes = [];\n      while (jokes.length < this.props.numJokes) {\n        let res = await axios.get(API_URL, {\n          headers: { Accept: \"application/json\" }\n        });\n        if (!this.seenJokes.has(res.data.joke)) {\n          jokes.push({ id: res.data.id, text: res.data.joke, votes: 0 });\n        } else {\n          console.log(\"Found a duplicate\");\n          console.log(res.data.joke);\n        }\n      }\n\n      this.setState(\n        st => ({\n          jokes: [...st.jokes, ...jokes],\n          loading: false\n        }),\n        () =>\n          window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\n      );\n    } catch (err) {\n      alert(err);\n      this.setState({ loading: false });\n    }\n  }\n\n  // Handle upvotes and downvotes\n  handleVote(id, delta) {\n    this.setState(\n      st => ({\n        jokes: st.jokes.map(jk =>\n          jk.id === id ? { ...jk, votes: jk.votes + delta } : jk\n        )\n      }),\n      () =>\n        window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\n    );\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className=\"JokeList-spinner\">\n          <i className=\"fas fa-8x fa-laugh fa-spin\" />\n          <h1 className=\"JokeList-title\">Loading Jokes...</h1>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"JokeList\">\n        <div className=\"JokeList-sidebar\">\n          <h1 className=\"JokeList-title\">\n            <span>Dad </span>Jokes\n          </h1>\n          <img\n            src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\"\n            alt=\"Laughing Emoji\"\n          />\n          <button className=\"JokeList-getmore\" onClick={this.handleClick}>\n            Get More Jokes\n          </button>\n        </div>\n        <div className=\"JokeList-jokes\">\n          {this.state.jokes.map(jk => (\n            <Joke\n              key={jk.id}\n              votes={jk.votes}\n              text={jk.text}\n              upvote={() => this.handleVote(jk.id, 1)}\n              downvote={() => this.handleVote(jk.id, -1)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default JokeList;\n","import React from \"react\";\nimport JokeList from \"./JokeList\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}