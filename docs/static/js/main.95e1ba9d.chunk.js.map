{"version":3,"sources":["Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","this","props","votes","className","onClick","upvote","style","borderColor","getColor","downvote","text","getEmoji","Component","JokeList","state","jokes","loadJokes","length","numJokes","axios","get","headers","Accept","res","push","id","data","joke","setState","delta","st","map","jk","src","alt","key","handleVote","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6WA2DeA,G,yLAtDX,OAAIC,KAAKC,MAAMC,OAAS,GACf,UACEF,KAAKC,MAAMC,OAAS,GACtB,UACEF,KAAKC,MAAMC,OAAS,EACtB,UACEF,KAAKC,MAAMC,OAAS,EACtB,UACEF,KAAKC,MAAMC,OAAS,EACtB,UACEF,KAAKC,MAAMC,OAAS,EACtB,UAEA,Y,iCAKT,OAAIF,KAAKC,MAAMC,OAAS,GACf,sCACEF,KAAKC,MAAMC,OAAS,GACtB,iBACEF,KAAKC,MAAMC,OAAS,EACtB,eACEF,KAAKC,MAAMC,OAAS,EACtB,8BACEF,KAAKC,MAAMC,OAAS,EACtB,qBACEF,KAAKC,MAAMC,OAAS,EACtB,iBAEA,gB,+BAKT,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,gBACb,uBAAGA,UAAU,iBAAiBC,QAASJ,KAAKC,MAAMI,SAClD,0BAAMF,UAAU,aAAaG,MAAO,CAAEC,YAAaP,KAAKQ,aACrDR,KAAKC,MAAMC,OAEd,uBAAGC,UAAU,mBAAmBC,QAASJ,KAAKC,MAAMQ,YAEtD,yBAAKN,UAAU,aAAaH,KAAKC,MAAMS,MACvC,yBAAKP,UAAU,cACb,uBAAGA,UAAWH,KAAKW,mB,GAjDVC,c,oOCKnB,IAEMC,E,YAIJ,WAAYZ,GAAQ,IAAD,8BACjB,4CAAMA,KACDa,MAAQ,CACXC,MAAO,IAHQ,E,iFAQjBf,KAAKgB,c,oJAIDD,EAAQ,G,YACLA,EAAME,OAASjB,KAAKC,MAAMiB,U,gCACfC,IAAMC,IApBd,8BAoB2B,CACjCC,QAAS,CAAEC,OAAQ,sB,OADjBC,E,OAGJR,EAAMS,KAAK,CAAEC,GAAIF,EAAIG,KAAKD,GAAIf,KAAMa,EAAIG,KAAKC,KAAMzB,MAAO,I,sBAG5DF,KAAK4B,SAAS,CAAEb,U,uIAIPU,EAAII,GACb7B,KAAK4B,UAAS,SAAAE,GAAE,MAAK,CACnBf,MAAOe,EAAGf,MAAMgB,KAAI,SAAAC,GAAE,OACpBA,EAAGP,KAAOA,E,yVAAV,IAAoBO,EAApB,CAAwB9B,MAAO8B,EAAG9B,MAAQ2B,IAAUG,W,+BAKhD,IAAD,OACP,OACE,yBAAK7B,UAAU,YACb,yBAAKA,UAAU,oBACb,wBAAIA,UAAU,kBACZ,sCADF,SAGA,yBACE8B,IAAI,6FACJC,IAAI,mBAEN,4BAAQ/B,UAAU,oBAAlB,mBAEF,yBAAKA,UAAU,kBACZH,KAAKc,MAAMC,MAAMgB,KAAI,SAAAC,GAAE,OACtB,kBAAC,EAAD,CACEG,IAAKH,EAAGP,GACRvB,MAAO8B,EAAG9B,MACVQ,KAAMsB,EAAGtB,KACTL,OAAQ,kBAAM,EAAK+B,WAAWJ,EAAGP,GAAI,IACrChB,SAAU,kBAAM,EAAK2B,WAAWJ,EAAGP,IAAK,e,GAxD/Bb,aAAjBC,EACGwB,aAAe,CACpBnB,SAAU,IA+DCL,Q,MC/DAyB,MARf,WACE,OACE,yBAAKnC,UAAU,OACb,kBAAC,EAAD,QCKcoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.95e1ba9d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Joke.css\";\n\nclass Joke extends Component {\n  getColor() {\n    if (this.props.votes >= 15) {\n      return \"#4CAF50\";\n    } else if (this.props.votes >= 12) {\n      return \"#8BC34A\";\n    } else if (this.props.votes >= 9) {\n      return \"#CDDC39\";\n    } else if (this.props.votes >= 6) {\n      return \"#FFEB3B\";\n    } else if (this.props.votes >= 3) {\n      return \"#FFC107\";\n    } else if (this.props.votes >= 0) {\n      return \"#FF9800\";\n    } else {\n      return \"#f44336\";\n    }\n  }\n\n  getEmoji() {\n    if (this.props.votes >= 15) {\n      return \"em em-rolling_on_the_floor_laughing\";\n    } else if (this.props.votes >= 12) {\n      return \"em em-laughing\";\n    } else if (this.props.votes >= 9) {\n      return \"em em-smiley\";\n    } else if (this.props.votes >= 6) {\n      return \"em em-slightly_smiling_face\";\n    } else if (this.props.votes >= 3) {\n      return \"em em-neutral_face\";\n    } else if (this.props.votes >= 0) {\n      return \"em em-confused\";\n    } else {\n      return \"em em-angry\";\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Joke\">\n        <div className=\"Joke-buttons\">\n          <i className=\"fa fa-arrow-up\" onClick={this.props.upvote}></i>\n          <span className=\"Joke-votes\" style={{ borderColor: this.getColor() }}>\n            {this.props.votes}\n          </span>\n          <i className=\"fa fa-arrow-down\" onClick={this.props.downvote}></i>\n        </div>\n        <div className=\"Joke-text\">{this.props.text}</div>\n        <div className=\"Joke-emoji\">\n          <i className={this.getEmoji()} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Joke;\n","// GET https://icanhazdadjoke.com/\n// GET https://icanhazdadjoke.com/search\n\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\nlet API_URL = \"https://icanhazdadjoke.com/\";\n\nclass JokeList extends Component {\n  static defaultProps = {\n    numJokes: 10\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes: []\n    };\n  }\n\n  componentDidMount() {\n    this.loadJokes();\n  }\n\n  async loadJokes() {\n    let jokes = [];\n    while (jokes.length < this.props.numJokes) {\n      let res = await axios.get(API_URL, {\n        headers: { Accept: \"application/json\" }\n      });\n      jokes.push({ id: res.data.id, text: res.data.joke, votes: 0 });\n    }\n\n    this.setState({ jokes });\n  }\n\n  // Handle upvotes and downvotes\n  handleVote(id, delta) {\n    this.setState(st => ({\n      jokes: st.jokes.map(jk =>\n        jk.id === id ? { ...jk, votes: jk.votes + delta } : jk\n      )\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"JokeList\">\n        <div className=\"JokeList-sidebar\">\n          <h1 className=\"JokeList-title\">\n            <span>Dad </span>Jokes\n          </h1>\n          <img\n            src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\"\n            alt=\"Laughing Emoji\"\n          />\n          <button className=\"JokeList-getmore\">Get More Jokes</button>\n        </div>\n        <div className=\"JokeList-jokes\">\n          {this.state.jokes.map(jk => (\n            <Joke\n              key={jk.id}\n              votes={jk.votes}\n              text={jk.text}\n              upvote={() => this.handleVote(jk.id, 1)}\n              downvote={() => this.handleVote(jk.id, -1)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default JokeList;\n","import React from \"react\";\nimport JokeList from \"./JokeList\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}